# -*- coding: utf-8 -*-
"""OOP_CAR_DEMO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z7o-fEiBFpyc9h_ACHRRRhIW1ibJ_tIN

"""


"""#List"""

from abc import ABC, abstractmethod

class Car(ABC):
    def __init__(self, brand, model, fuel_type, mileage):
        self._brand = brand
        self._model = model
        self._fuel_type = fuel_type
        self._fuel_level = 100
        self._mileage = mileage
        self._features = []
        print(f"A new {self._brand} {self._model} ({self._fuel_type}) car is created.")

    @abstractmethod
    def start(self):
        pass

    @abstractmethod
    def drive(self, distance=None, time=None):
        pass

    def refuel(self):
        print(f"Refueling the {self._brand} {self._model}.")
        self._fuel_level = 100

    def get_fuel_level(self):
        return self._fuel_level

    def add_feature(self, feature):
        self._features.append(feature)

    def display_features(self):
        print(f"Features of {self._brand} {self._model}: {', '.join(self._features)}")

    def __str__(self):
        return f"{self._brand} {self._model} ({self._fuel_type})"

    def __del__(self):
        print(f"The {self._brand} {self._model} car is being destroyed.")

    def get_info(self):
        return {
            "brand": self._brand,
            "model": self._model,
            "fuel_type": self._fuel_type,
            "mileage": self._mileage,
            "features": self._features
        }

class PetrolCar(Car):
    def __init__(self, brand, model):
        super().__init__(brand, model, fuel_type='Petrol', mileage=20)
        self.add_feature("GPS Navigation")
        self.add_feature("Bluetooth Connectivity")

    def start(self):
        print(f"{self._brand} {self._model} with keyless ignition is starting.")

    def drive(self, distance=None, time=None):
        if distance is not None:
            print(f"{self._brand} {self._model} is driving for {distance} miles.")
            fuel_consumed = distance / self._mileage
            self._fuel_level -= fuel_consumed
            print(f"Fuel consumption: {fuel_consumed:.2f} gallons")
            print(f"Remaining fuel: {self._fuel_level:.2f}%")
        elif time is not None:
            print(f"{self._brand} {self._model} is driving for {time} hours.")
            fuel_consumed = time * 5  # Assuming a constant speed and fuel consumption rate
            self._fuel_level -= fuel_consumed
            print(f"Fuel consumption: {fuel_consumed:.2f} gallons")
            print(f"Remaining fuel: {self._fuel_level:.2f}%")

class DieselCar(Car):
    def __init__(self, brand, model):
        super().__init__(brand, model, fuel_type='Diesel', mileage=25)
        self.add_feature("Cruise Control")
        self.add_feature("Advanced Safety Systems")

    def start(self):
        print(f"{self._brand} {self._model} with traditional key is starting.")

    def drive(self, distance=None, time=None):
        if distance is not None:
            print(f"{self._brand} {self._model} is driving for {distance} miles.")
            fuel_consumed = distance / self._mileage
            self._fuel_level -= fuel_consumed
            print(f"Fuel consumption: {fuel_consumed:.2f} gallons")
            print(f"Remaining fuel: {self._fuel_level:.2f}%")
        elif time is not None:
            print(f"{self._brand} {self._model} is driving for {time} hours.")
            fuel_consumed = time * 6
            self._fuel_level -= fuel_consumed
            print(f"Fuel consumption: {fuel_consumed:.2f} gallons")
            print(f"Remaining fuel: {self._fuel_level:.2f}%")

class ElectricCar(Car):
    def __init__(self, brand, model, fuel_type='Electric', mileage=15):
        super().__init__(brand, model, fuel_type, mileage)
        self.add_feature("Autopilot System")
        self.add_feature("Regenerative Braking System")

    def start(self):
        print(f"{self._brand} {self._model} with push-button start is starting.")

    def drive(self, distance=None, time=None):
        if distance is not None:
            print(f"{self._brand} {self._model} is driving for {distance} miles.")
            fuel_consumed = distance / self._mileage
            self._fuel_level -= fuel_consumed
            print(f"Electricity consumption: {fuel_consumed:.2f} kWh")
            print(f"Remaining charge: {self._fuel_level:.2f}%")
        elif time is not None:
            print(f"{self._brand} {self._model} is driving for {time} hours.")
            fuel_consumed = time * 2
            self._fuel_level -= fuel_consumed
            print(f"Electricity consumption: {fuel_consumed:.2f} kWh")
            print(f"Remaining charge: {self._fuel_level:.2f}%")

class HybridCar(PetrolCar, ElectricCar):
    def __init__(self, brand, model):
        ElectricCar.__init__(self, brand, model)
        PetrolCar.__init__(self, brand, model)

        self.add_feature("Hybrid Drive System")
        self.add_feature("Panoramic Sunroof")

    def drive(self, distance=None, time=None):
        if distance is not None:
            print(f"{self._brand} {self._model} (Hybrid) is driving for {distance} miles.")
            petrol_fuel_consumed = distance / self._mileage
            electric_fuel_consumed = distance / self._mileage
            total_fuel_consumed = petrol_fuel_consumed + electric_fuel_consumed
            self._fuel_level -= total_fuel_consumed
            print(f"Petrol fuel consumption: {petrol_fuel_consumed:.2f} gallons")
            print(f"Electricity consumption: {electric_fuel_consumed:.2f} kWh")
            print(f"Remaining fuel: {self._fuel_level:.2f}%")
        elif time is not None:
            print(f"{self._brand} {self._model} (Hybrid) is driving for {time} hours.")
            petrol_fuel_consumed = time * 5
            electric_fuel_consumed = time * 2
            total_fuel_consumed = petrol_fuel_consumed + electric_fuel_consumed
            self._fuel_level -= total_fuel_consumed
            print(f"Petrol fuel consumption: {petrol_fuel_consumed:.2f} gallons")
            print(f"Electricity consumption: {electric_fuel_consumed:.2f} kWh")
            print(f"Remaining fuel: {self._fuel_level:.2f}%")

def main():
    cars = []

    while True:
        print("\nMenu:")
        print("1. Add Vehicle")
        print("2. Display Vehicles")
        print("3. Remove Vehicle")
        print("4. Exit")

        choice = int(input("Enter your choice: "))

        if choice == 1:
            print("\nAdd Vehicle:")
            print("\nSelect Vehicle Type:")
            print("1. Petrol Car")
            print("2. Diesel Car")
            print("3. Electric Car")
            print("4. Hybrid Car")

            vehicle_choice = int(input("Enter vehicle type (1-4): "))

            brand = input("Enter the brand of the car: ")
            model = input("Enter the model of the car: ")

            if vehicle_choice == 1:
                car = PetrolCar(brand, model)
            elif vehicle_choice == 2:
                car = DieselCar(brand, model)
            elif vehicle_choice == 3:
                car = ElectricCar(brand, model)
            elif vehicle_choice == 4:
                car = HybridCar(brand, model)
            else:
                print("Invalid choice. Try again.")
                continue

            distance = float(input("Enter the distance to simulate driving: "))
            car.drive(distance=distance)
            cars.append(car)
            print(f"{car} added successfully!")

        elif choice == 2:
            print("\nDisplaying Vehicles:")
            for car in cars:
                print("\n====================")
                car.display_features()

        elif choice == 3:
            print("\nRemove Vehicle:")
            brand = input("Enter the brand of the car to remove: ")
            model = input("Enter the model of the car to remove: ")

            found = False
            for car in cars:
                if car._brand == brand and car._model == model:
                    cars.remove(car)
                    del car
                    print(f"{brand} {model} removed successfully!")
                    found = True
                    break

            if not found:
                print("Car not found.")

        elif choice == 4:
            print("Exiting...")
            break

        else:
            print("Invalid choice. Try again.")

if __name__ == "__main__":
    main()

